<?xml version="1.0"?>
<!-- SharpWebMail build file -->
<project name="anmar.SharpWebMail" default="debug">
	<property name="project.name" value="SharpWebMail" />
	<property name="build.defines" value="" />
	<property name="build.debug" value="false" />
	<property name="build.basedir" value="${nant.project.basedir}" />
	<property name="build.dir" value="" />
	<property name="build.config" value="release" />
	<property name="build.ref" value="" />
	<property name="build.res" value="" />
	<fileset id="build.files.source">
		<include name="${build.basedir}/controls/src/**/*.cs" />
		<exclude name="**debug**" />
	</fileset>
	<fileset id="build.files.general">
		<include name="${build.basedir}/SharpWebMail.cmbx" />
		<include name="${build.basedir}/controls/SharpWebMail.prjx" />
	</fileset>
	<fileset id="build.files.docs">
		<include name="${build.basedir}/changelog.txt" />
		<include name="${build.basedir}/license.txt" />
		<include name="${build.basedir}/doc/readme.txt" />
		<include name="${build.basedir}/doc/TODO.txt" />
	</fileset>
	<target name="build-asp.net-release" depends="release, build-asp.net" />
	<target name="build-asp.net-debug" depends="debug, build-asp.net" />
	<target name="build-asp.net" depends="build-pre">
		<mkdir dir="${build.aspdir}" unless="${directory::exists(build.aspdir)}" />
		<copy todir="${build.aspdir}/bin" flatten="true">
			<fileset basedir="${build.dir}">
				<include name="${build.dir}/*.dll" />
				<include name="${build.dir}/*.pdb" />
				<include name="${build.dir}/*.mdb" />
				<include name="${build.ref}/*.dll" />
			</fileset>
		</copy>
		<copy file="${build.res}/${project.name}.resources" tofile="${build.res}/${project.name}.en.resources" />
		<foreach item="File" property="filename">
			<in>
				<items basedir="${build.res}">
					<include name="*.*.resources" />
				</items>
			</in>
			<do>
				<property name="current.resfile" value="${string::substring(filename, string::last-index-of(filename, '\')+1, string::get-length(filename)-(string::last-index-of(filename, '\')+1))}" />
				<property name="current.resfile.culture" value="${string::substring(current.resfile, string::index-of(current.resfile, '.')+1, string::last-index-of(current.resfile, '.')-(string::index-of(current.resfile, '.')+1))}" />
				<call target="build-asp.net-satellite" />
			</do>
		</foreach>
		<delete file="${build.res}/${project.name}.en.resources" />
	</target>
	<target name="build-asp.net-satellite">
		<mkdir dir="${build.aspdir}/bin/${current.resfile.culture}" unless="${directory::exists(build.aspdir + '/bin/' + current.resfile.culture)}" />
		<al target="lib" culture="${current.resfile.culture}" output="${build.aspdir}/bin/${current.resfile.culture}/SharpWebMail.resources.dll" template="${build.dir}/${project.name}.dll">
			<sources>
				<include name="${filename}" />
			</sources>
		</al>
	</target>
	<target name="build" depends="build-pre">
		<mkdir dir="${build.dir}" unless="${directory::exists(build.dir)}" />
		<csc target="library" define="${build.defines}" warnaserror="false" debug="${build.debug}" output="${build.dir}/${project.name}.dll">
			<sources failonempty="true" refid="build.files.source" />
			<references>
				<include name="${build.ref}/FredCK.FCKeditorV2.dll" />
				<include name="${build.ref}/log4net.dll" />
				<include name="${build.ref}/OpenSmtp.dll" />
				<include name="${build.ref}/SharpMimeTools.dll" />
				<include name="System.Data.dll" />
				<include name="System.Directoryservices.dll" />
				<include name="System.Web.dll" />
			</references>
			<resources>
				<include name="${build.res}/SharpWebMail.resources" />
			</resources>
		</csc>
	</target>
	<target name="debug" description="Debug build">
		<property name="build.debug" value="true" />
		<property name="build.config" value="debug" />
		<property name="build.defines" value="DEBUG" />
		<call target="build" />
	</target>
	<target name="release" description="Release build">
		<property name="build.debug" value="false" />
		<property name="build.config" value="release" />
		<property name="build.defines" value="" />
		<call target="build" />
	</target>
	<target name="build-pre">
		<call target="set-folders" />
		<call target="set-framework-config" />
	</target>
	<target name="set-folders">
		<property name="build.dir" value="${build.basedir}/controls/bin/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}/${build.config}" />
		<property name="build.aspdir" value="${build.basedir}/asp.net" />
		<property name="build.res" value="${build.basedir}/controls/res" />
		<property name="build.ref" value="${build.basedir}/controls/bin/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}" />
	</target>

	<!-- Framework targets -->
	<target name="set-framework-config">
		<if test="${not(target::exists('set-'+framework::get-target-framework()+'-config'))}">
            <fail message="The '${framework::get-target-framework()}' framework is not supported" />
        </if>
        <call target="set-${framework::get-target-framework()}-config" />
	</target>
	<!-- Set default .NET config values -->
	<target name="set-net-config" />
	<!-- Set default .NET 1.1 config values  -->
	<target name="set-net-1.1-config" depends="set-net-config" />
	<!-- Set default .NET 2.0 config values  -->
	<target name="set-net-2.0-config" depends="set-net-config" />
	<!-- Set default Mono config values  -->
	<target name="set-mono-config">
		<property name="build.defines" value="${build.defines},MONO" />
	</target>
	<!-- Set default Mono 1.0 config values  -->
	<target name="set-mono-1.0-config" depends="set-mono-config" />
	<!-- Set default Mono 2.0 config values  -->
	<target name="set-mono-2.0-config" depends="set-mono-config" />
</project>
